<?php

/**
 * BasePlayer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $firstname
 * @property string $lastname
 * @property string $nickname
 * @property string $email
 * @property string $team
 * @property string $team_tag
 * @property enum $pc_type
 * @property boolean $wants_cable
 * @property string $token
 * @property string $bnet_email
 * @property string $bnet_ccode
 * @property integer $tournament_id
 * @property boolean $subtournament
 * @property Tournament $Tournament
 * 
 * @method string     getFirstname()     Returns the current record's "firstname" value
 * @method string     getLastname()      Returns the current record's "lastname" value
 * @method string     getNickname()      Returns the current record's "nickname" value
 * @method string     getEmail()         Returns the current record's "email" value
 * @method string     getTeam()          Returns the current record's "team" value
 * @method string     getTeamTag()       Returns the current record's "team_tag" value
 * @method enum       getPcType()        Returns the current record's "pc_type" value
 * @method boolean    getWantsCable()    Returns the current record's "wants_cable" value
 * @method string     getToken()         Returns the current record's "token" value
 * @method string     getBnetEmail()     Returns the current record's "bnet_email" value
 * @method string     getBnetCcode()     Returns the current record's "bnet_ccode" value
 * @method integer    getTournamentId()  Returns the current record's "tournament_id" value
 * @method boolean    getSubtournament() Returns the current record's "subtournament" value
 * @method Tournament getTournament()    Returns the current record's "Tournament" value
 * @method Player     setFirstname()     Sets the current record's "firstname" value
 * @method Player     setLastname()      Sets the current record's "lastname" value
 * @method Player     setNickname()      Sets the current record's "nickname" value
 * @method Player     setEmail()         Sets the current record's "email" value
 * @method Player     setTeam()          Sets the current record's "team" value
 * @method Player     setTeamTag()       Sets the current record's "team_tag" value
 * @method Player     setPcType()        Sets the current record's "pc_type" value
 * @method Player     setWantsCable()    Sets the current record's "wants_cable" value
 * @method Player     setToken()         Sets the current record's "token" value
 * @method Player     setBnetEmail()     Sets the current record's "bnet_email" value
 * @method Player     setBnetCcode()     Sets the current record's "bnet_ccode" value
 * @method Player     setTournamentId()  Sets the current record's "tournament_id" value
 * @method Player     setSubtournament() Sets the current record's "subtournament" value
 * @method Player     setTournament()    Sets the current record's "Tournament" value
 * 
 * @package    sfHfLan
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePlayer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('player');
        $this->hasColumn('firstname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('lastname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('nickname', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('team', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('team_tag', 'string', 16, array(
             'type' => 'string',
             'length' => 16,
             ));
        $this->hasColumn('pc_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'none',
              1 => 'laptop',
              2 => 'desktop',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('wants_cable', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('bnet_email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('bnet_ccode', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('tournament_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('subtournament', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Tournament', array(
             'local' => 'tournament_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}