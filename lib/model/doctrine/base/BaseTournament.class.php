<?php

/**
 * BaseTournament
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $number_of_teams
 * @property integer $inscription_price
 * @property integer $event_id
 * @property integer $game_id
 * @property boolean $is_subtournament_enabled
 * @property integer $subtournament_inscription_price
 * @property string $subtournament_name
 * @property Event $Event
 * @property Game $Game
 * @property Doctrine_Collection $Players
 * 
 * @method string              getName()                            Returns the current record's "name" value
 * @method integer             getNumberOfTeams()                   Returns the current record's "number_of_teams" value
 * @method integer             getInscriptionPrice()                Returns the current record's "inscription_price" value
 * @method integer             getEventId()                         Returns the current record's "event_id" value
 * @method integer             getGameId()                          Returns the current record's "game_id" value
 * @method boolean             getIsSubtournamentEnabled()          Returns the current record's "is_subtournament_enabled" value
 * @method integer             getSubtournamentInscriptionPrice()   Returns the current record's "subtournament_inscription_price" value
 * @method string              getSubtournamentName()               Returns the current record's "subtournament_name" value
 * @method Event               getEvent()                           Returns the current record's "Event" value
 * @method Game                getGame()                            Returns the current record's "Game" value
 * @method Doctrine_Collection getPlayers()                         Returns the current record's "Players" collection
 * @method Tournament          setName()                            Sets the current record's "name" value
 * @method Tournament          setNumberOfTeams()                   Sets the current record's "number_of_teams" value
 * @method Tournament          setInscriptionPrice()                Sets the current record's "inscription_price" value
 * @method Tournament          setEventId()                         Sets the current record's "event_id" value
 * @method Tournament          setGameId()                          Sets the current record's "game_id" value
 * @method Tournament          setIsSubtournamentEnabled()          Sets the current record's "is_subtournament_enabled" value
 * @method Tournament          setSubtournamentInscriptionPrice()   Sets the current record's "subtournament_inscription_price" value
 * @method Tournament          setSubtournamentName()               Sets the current record's "subtournament_name" value
 * @method Tournament          setEvent()                           Sets the current record's "Event" value
 * @method Tournament          setGame()                            Sets the current record's "Game" value
 * @method Tournament          setPlayers()                         Sets the current record's "Players" collection
 * 
 * @package    sfHfLan
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTournament extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tournament');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('number_of_teams', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('inscription_price', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('event_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('game_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('is_subtournament_enabled', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('subtournament_inscription_price', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('subtournament_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Event', array(
             'local' => 'event_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Game', array(
             'local' => 'game_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Player as Players', array(
             'local' => 'id',
             'foreign' => 'tournament_id'));
    }
}